//
// MarkusLang Parser
// A basic language made up of Markus Lumpe quotes
//
// Alex Cummaudo
// 1 October 2014
//

options
{
    STATIC = false;
    OUTPUT_DIRECTORY = "markuslang/parser";
}

PARSER_BEGIN(MarkusLangParser)

package markuslang.parser;

import java.io.*;
import java.util.*;
import markuslang.ast.*;
import markuslang.ast.statements.*;
import markuslang.ast.arguments.*;
import markuslang.machine.*;

public class MarkusLangParser
{
    public static void main(String[] args)
    {
        try
        {
            MarkusLangParser lParser = new MarkusLangParser ( new FileInputStream ( args[0] ) );
            
            ArrayList< Statement > lStatements = lParser.Program ();
            
            System.out.println ("MarkusLang Code Accepted:");
            
            for (Statement stmt : lStatements)
                System.out.println (stmt);
            
            System.out.println ("Running program:"); 
            MarkusMachine lMachine = new MarkusMachine ();
            
            for (Statement stmt : lStatements)
                stmt.accept (lMachine); 
            
            lMachine.printMemoryTrace ();
        }
        catch (ParseException e)
        {
            System.out.println ("We have a boo-boo: \n " + e.toString());
        }
        catch (java.io.FileNotFoundException e)
        {
            System.err.println ("We have a boo-boo: \n " + e.toString());
        }
    }
}

PARSER_END(MarkusLangParser)

SKIP:
{
    " " | "\n" | "\r" | "\t" | < "#" (~["\n"])* "\n" >
}

// Program ::= "i am the dictator" 
//             (Statement)* 
//             "everything is peachy"
//             < EOF >
ArrayList< Statement > Program ():
{
    ArrayList < Statement > lRet = new ArrayList < Statement >();
    Statement lStmt;
}
{
    "i am the dictator"
    ( lStmt = Statement () { lRet.add (lStmt); } )*
    "everything is peachy"
    < EOF >
    { return lRet; }
}

/*
 * Statement ::= this thingy < VARIABLE >
 *             | this little piggy < VARIABLE > is (< NUMBER > | < STRING >)
 */
Statement Statement ():
{
    Token lStmtToken;
    Token lVarToken;
    AssignableArgument lArgument;
}
{
    /*
     * this little piggy < VARIABLE > is ( < NUMBER > | < STRING > )
     * assigns to the variable name provided the number or string
     */
    lStmtToken = "this little piggy"
    lVarToken = < VARIABLE >
    "is" 
    lArgument = AssignableArgument ()
    {
        return new AssignmentStatement (lStmtToken, lVarToken, lArgument);
    }
    |
    /*
     * what is this thingy < VARIABLE >?
     * prints the variable provided
     */
    lStmtToken = "what is this thingy"
    lVarToken = < VARIABLE >
    "?"
    {
        return new PrintStatement (lStmtToken, lVarToken);
    }
}

/*
 * Anything that is assignable can only be a string or number
 */
AssignableArgument AssignableArgument ():
{
    Token lToken;
}
{
    lToken = < STRING >
    {
        return new StringArgument (lToken);
    } 
    | 
    lToken = < NUMBER >
    {
        return new NumberArgument (lToken);
    }
}

TOKEN:
{
    // Variables must all be lowercase, in snake_case
    < VARIABLE : ["a"-"z"](["a"-"z", "_"])+ >
    |
    // IEEE standard for floating point
    < NUMBER : (["0"-"9"])+ ("." (["0"-"9"])*)? ("E" ("+"|"-")? (["0"-"9"])+)? >
    |
    // Wrapped in single quotes
    < STRING : "\'"(~["\'"])*"\'" >
}