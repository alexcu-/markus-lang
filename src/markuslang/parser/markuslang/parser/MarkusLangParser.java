/* Generated By:JavaCC: Do not edit this line. MarkusLangParser.java */
package markuslang.parser;

import java.io.*;
import java.util.*;
import markuslang.ast.*;
import markuslang.ast.statements.*;
import markuslang.ast.arguments.*;
import markuslang.machine.*;

public class MarkusLangParser implements MarkusLangParserConstants {
    public static void main(String[] args)
    {
        try
        {
            MarkusLangParser lParser = new MarkusLangParser ( new FileInputStream ( args[0] ) );

            ArrayList< Statement > lStatements = lParser.Program ();

            System.out.println ("MarkusLang Code Accepted:");

            for (Statement stmt : lStatements)
                System.out.println (stmt);

            System.out.println ("Running program:");
            MarkusMachine lMachine = new MarkusMachine ();

            for (Statement stmt : lStatements)
                stmt.accept (lMachine);

            lMachine.printMemoryTrace ();
        }
        catch (ParseException e)
        {
            System.out.println ("We have a boo-boo: \u005cn " + e.toString());
        }
        catch (java.io.FileNotFoundException e)
        {
            System.err.println ("We have a boo-boo: \u005cn " + e.toString());
        }
    }

// Program ::= "i am the dictator" 
//             (Statement)* 
//             "everything is peachy"
//             < EOF >
  final public ArrayList< Statement > Program() throws ParseException {
    ArrayList < Statement > lRet = new ArrayList < Statement >();
    Statement lStmt;
    jj_consume_token(6);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 8:
      case 10:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      lStmt = Statement();
                             lRet.add (lStmt);
    }
    jj_consume_token(7);
    jj_consume_token(0);
      {if (true) return lRet;}
    throw new Error("Missing return statement in function");
  }

/*
 * Statement ::= this thingy < VARIABLE >
 *             | this little piggy < VARIABLE > is (< NUMBER > | < STRING >)
 */
  final public Statement Statement() throws ParseException {
    Token lStmtToken;
    Token lVarToken;
    AssignableArgument lArgument;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 8:
      /*
           * this little piggy < VARIABLE > is ( < NUMBER > | < STRING > )
           * assigns to the variable name provided the number or string
           */
          lStmtToken = jj_consume_token(8);
      lVarToken = jj_consume_token(VARIABLE);
      jj_consume_token(9);
      lArgument = AssignableArgument();
        {if (true) return new AssignmentStatement (lStmtToken, lVarToken, lArgument);}
      break;
    case 10:
      /*
           * what is this thingy < VARIABLE >?
           * prints the variable provided
           */
          lStmtToken = jj_consume_token(10);
      lVarToken = jj_consume_token(VARIABLE);
      jj_consume_token(11);
        {if (true) return new PrintStatement (lStmtToken, lVarToken);}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/*
 * Anything that is assignable can only be a string or number
 */
  final public AssignableArgument AssignableArgument() throws ParseException {
    Token lToken;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      lToken = jj_consume_token(STRING);
        {if (true) return new StringArgument (lToken);}
      break;
    case NUMBER:
      lToken = jj_consume_token(NUMBER);
        {if (true) return new NumberArgument (lToken);}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public MarkusLangParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x500,0x500,0x6000,};
   }

  /** Constructor with InputStream. */
  public MarkusLangParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MarkusLangParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MarkusLangParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MarkusLangParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MarkusLangParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MarkusLangParser(MarkusLangParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MarkusLangParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[15];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 15; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
