//
// MarkusLang Parser
// A basic language made up of Markus Lumpe quotes
//
// Alex Cummaudo
// 1 October 2014
//

options
{
    STATIC = false;
    OUTPUT_DIRECTORY = "parser";
}

PARSER_BEGIN(MarkusLangParser)

package parser;

public class MarkusLangParser
{
    public static void main(String[] args)
    {
        try
        {
            PCodeParser lParser = new PCodeParser ( new FileInputStream ( args[0] ) );
            
            ArrayList< PCode > lInstructions = lParser.Program ();
            
            System.out.println ("PCode Accepted:");
            
            for (PCode pc : lInstructions)
            {
                System.out.println(pc);
            }
            
            System.out.println( "Running program: " ); 
            PCodeMachine lMachine = new PCodeMachine();
            
            for ( PCode inst : lInstructions )
            {
                inst.accept( lMachine ); 
            }
            
            lMachine.printStackTrace();
            lMachine.printMemoryTrace();
        }
        catch (ParseException e)
        {
            System.out.println ("Syntax Error: \n " + e.toString());
        }
        catch (java.io.FileNotFoundException e)
        {
            System.err.println ("Error: \n " + e.toString());
        }
    }
}

PARSER_END(MarkusLangParser)

SKIP:
{
    " " | "\n" | "\r" | "\t" | < "#" (~["\n"])* "\n" >
}

// Program ::= "i am the dictator" 
//             (MarkusLangInstruction)* 
//             "everything is peachy"
//             < EOF >
ArrayList< MLangInstruction > Program ():
{
    ArrayList < MLangInstruction > lRet = new ArrayList < MLangInstruction >();
    MLangInstruction lCode;
}
{
    "i am the dictator"
    ( lCode = PCodeInstruction () { lRet.add(lCode); } )*
    "everything is peachy"
    < EOF >
    { return lRet; }
}

/*
 * MarkusLangInstruction ::= this thingy < VARIABLE >
 *                         | this little piggy < VARIABLE > is (< NUMBER > | < STRING >)
 */
PCode PCodeInstruction ():
{
    Token lInstructionToken;
    Token lStringOrVariableToken;
    PCodeArgument lArgument;
}
{
    /*
     * this little piggy < VARIABLE > is ( < NUMBER > | < STRING > )
     * assigns to the variable name provided the number or string
     */
    lInstructionToken = "this little piggy"
    lStringOrVariableToken = < VARIABLE >
    "is" ( < NUMBER > | < STRING > )
    {
        return new AssignmentStatement (lInstructionToken);
    }
    |
    /*
     * this thingy < VARIABLE >
     * prints the variable provided
     */
    lInstructionToken = "this thingy"
    lStringOrVariableToken = < VARIABLE >
    {
        return new PrintStatement (lInstructionToken, lStringOrVariableToken);
    }
}

/*
 * Anything that is assignable can only be a string or number
 */
AssignmentArgument AssignmentArgument ():
{
    Token lToken;
}
{
    lToken = < STRING >
    {
        return new StringArgument (lToken);
    } 
    | 
    lToken = < NUMBER >
    {
        return new NumberArgument (lToken);
    }
}

TOKEN:
{
    // Variables must all be lowercase, in snake_case
    < VARIABLE : ["a"-"z"](["a"-"z", "_"])+ >
    |
    // IEEE standard for floating point
    < NUMBER : (["0"-"9"])+ ("." (["0"-"9"])*)? ("E" ("+"|"-")? (["0"-"9"])+)? >
    |
    // Wrapped in single quotes
    < STRING : "\'"(~["\'"])*"\'" >
}